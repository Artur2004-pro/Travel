openapi: 3.0.0
info:
  title: Bardiner Travel API
  description: Backend API documentation for Bardiner Travel platform.
  version: 1.0.0

servers:
  - url: http://localhost:9999
    description: Local development server

tags:
  - name: Auth
    description: User authentication and verification
  - name: Account
    description: User account management
  - name: Admin
    description: Admin role and permissions
  - name: Country
    description: Country management endpoints
  - name: City
    description: City management endpoints
  - name: Email
    description: Email verification and password reset

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username: { type: string }
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
      responses:
        "201": { description: Verification email sent }
        "400": { description: Invalid input }

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in with username or email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }
      responses:
        "200": { description: Successful login }

  /auth/resend-verification:
    post:
      tags: [Auth]
      summary: Resend verification email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }

  /auth/forgot/password:
    post:
      tags: [Auth]
      summary: Send forgot password email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username]
              properties:
                username: { type: string }

  /auth/forgot-password/update:
    post:
      tags: [Auth]
      summary: Update password after forgot-password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password: { type: string }

  /email/verify-email:
    get:
      tags: [Email]
      summary: Verify email by token
      parameters:
        - in: query
          name: token
          required: true
          schema: { type: string }

  /email/forgot-password:
    get:
      tags: [Email]
      summary: Verify forgot password token
      parameters:
        - in: query
          name: token
          required: true
          schema: { type: string }

  /account:
    get:
      tags: [Account]
      summary: Get account info
      security:
        - bearerAuth: []

  /account/update-password:
    post:
      tags: [Account]
      summary: Update user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }

  /account/update-username:
    post:
      tags: [Account]
      summary: Update username
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username: { type: string }
                password: { type: string }

  /admin/be-admin:
    post:
      tags: [Admin]
      summary: Make user admin (requires admin token)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [adminToken]
              properties:
                adminToken: { type: string }

  /country:
    get:
      tags: [Country]
      summary: Get all countries

  /country/search:
    get:
      tags: [Country]
      summary: Search countries by name
      parameters:
        - in: query
          name: name
          schema: { type: string }

  /country/add:
    post:
      tags: [Country]
      summary: Add new country
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, description, country]
              properties:
                name: { type: string }
                description: { type: string }
                country:
                  type: array
                  items: { type: string, format: binary }

  /country/{id}:
    get:
      tags: [Country]
      summary: Get country by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
    delete:
      tags: [Country]
      summary: Delete a country
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }

  /country/{id}/update:
    patch:
      tags: [Country]
      summary: Update country data
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }

  /country/{id}/photos:
    delete:
      tags: [Country]
      summary: Delete a country photo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: filename
          required: true
          schema: { type: string }

  /city/{countryId}:
    post:
      tags: [City]
      summary: Add city to country
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: countryId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, description, city]
              properties:
                name: { type: string }
                description: { type: string }
                city:
                  type: array
                  items: { type: string, format: binary }

  /city/{id}:
    get:
      tags: [City]
      summary: Get city by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
    delete:
      tags: [City]
      summary: Delete a city
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }

  /city/{id}/update:
    patch:
      tags: [City]
      summary: Update city info
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }

  /city/{id}/photos:
    delete:
      tags: [City]
      summary: Delete city photo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: filename
          required: true
          schema: { type: string }

  /city/all/{countryId}:
    get:
      tags: [City]
      summary: Get all cities of a country
      parameters:
        - in: path
          name: countryId
          required: true
          schema: { type: string }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
